(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('js-brasil'), require('@angular/platform-browser'), require('text-mask-core')) :
    typeof define === 'function' && define.amd ? define('ng-brazil', ['exports', '@angular/core', '@angular/forms', 'js-brasil', '@angular/platform-browser', 'text-mask-core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ng-brazil'] = {}, global.ng.core, global.ng.forms, global.jsBrasil, global.ng.platformBrowser, global.textMask));
}(this, (function (exports, core, forms, jsBrasil, platformBrowser, textMask) { 'use strict';

    var cpf = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cpf(v) ? null : { cpf: true };
    };

    var CPF_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CPFValidator; }),
        multi: true
    };
    var CPFValidator = /** @class */ (function () {
        function CPFValidator() {
        }
        CPFValidator.prototype.validate = function (c) {
            return cpf(c);
        };
        return CPFValidator;
    }());
    CPFValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
                    providers: [CPF_VALIDATOR]
                },] }
    ];

    var CPFPipe = /** @class */ (function () {
        function CPFPipe() {
        }
        CPFPipe.prototype.transform = function (cpfValue) {
            return jsBrasil.maskBr.cpf(cpfValue);
        };
        return CPFPipe;
    }());
    CPFPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'cpf',
                },] }
    ];

    var cnpj = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cnpj(v) ? null : { cnpj: true };
    };

    var CNPJ_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CNPJValidator; }),
        multi: true
    };
    var CNPJValidator = /** @class */ (function () {
        function CNPJValidator() {
        }
        CNPJValidator.prototype.validate = function (c) {
            return cnpj(c);
        };
        return CNPJValidator;
    }());
    CNPJValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
                    providers: [CNPJ_VALIDATOR]
                },] }
    ];

    var CNPJPipe = /** @class */ (function () {
        function CNPJPipe() {
        }
        CNPJPipe.prototype.transform = function (cnpjValue) {
            return jsBrasil.maskBr.cnpj(cnpjValue);
        };
        return CNPJPipe;
    }());
    CNPJPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'cnpj',
                },] }
    ];

    var telefone = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.telefone(v) ? null : { telefone: true };
    };

    var TELEFONE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TelefoneValidator; }),
        multi: true
    };
    var TelefoneValidator = /** @class */ (function () {
        function TelefoneValidator() {
        }
        TelefoneValidator.prototype.validate = function (c) {
            return telefone(c);
        };
        return TelefoneValidator;
    }());
    TelefoneValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
                    providers: [TELEFONE_VALIDATOR]
                },] }
    ];

    var TelefonePipe = /** @class */ (function () {
        function TelefonePipe() {
        }
        TelefonePipe.prototype.transform = function (telefoneValue) {
            return jsBrasil.maskBr.telefone(telefoneValue);
        };
        return TelefonePipe;
    }());
    TelefonePipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'telefone',
                },] }
    ];

    var celular = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.celular(v) ? null : { celular: true };
    };

    var CELULAR_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CelularValidator; }),
        multi: true
    };
    var CelularValidator = /** @class */ (function () {
        function CelularValidator() {
        }
        CelularValidator.prototype.validate = function (c) {
            return celular(c);
        };
        return CelularValidator;
    }());
    CelularValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
                    providers: [CELULAR_VALIDATOR]
                },] }
    ];

    var CelularPipe = /** @class */ (function () {
        function CelularPipe() {
        }
        CelularPipe.prototype.transform = function (celularValue) {
            return jsBrasil.maskBr.celular(celularValue);
        };
        return CelularPipe;
    }());
    CelularPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'celular',
                },] }
    ];

    var inscricaoestadual = function (estado) {
        return function (control) {
            if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
                return null;
            }
            var v = control.value;
            return jsBrasil.validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
        };
    };

    var INSCRICAOESTADUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return InscricaoEstadualValidator; }),
        multi: true
    };
    var InscricaoEstadualValidator = /** @class */ (function () {
        function InscricaoEstadualValidator() {
        }
        InscricaoEstadualValidator.prototype.validate = function (c) {
            return inscricaoestadual('mg')(c);
        };
        return InscricaoEstadualValidator;
    }());
    InscricaoEstadualValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
                    providers: [INSCRICAOESTADUAL_VALIDATOR]
                },] }
    ];

    var InscricaoEstadualPipe = /** @class */ (function () {
        function InscricaoEstadualPipe() {
        }
        InscricaoEstadualPipe.prototype.transform = function (inscricaoestadualValue, estado) {
            return jsBrasil.maskBr.inscricaoestadual(inscricaoestadualValue, estado);
        };
        return InscricaoEstadualPipe;
    }());
    InscricaoEstadualPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'inscricaoestadual',
                },] }
    ];

    var cep = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.cep(v) ? null : { cep: true };
    };

    var CEP_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CEPValidator; }),
        multi: true
    };
    var CEPValidator = /** @class */ (function () {
        function CEPValidator() {
        }
        CEPValidator.prototype.validate = function (c) {
            return cep(c);
        };
        return CEPValidator;
    }());
    CEPValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
                    providers: [CEP_VALIDATOR]
                },] }
    ];

    var CEPPipe = /** @class */ (function () {
        function CEPPipe() {
        }
        CEPPipe.prototype.transform = function (cepValue) {
            return jsBrasil.maskBr.cep(cepValue);
        };
        return CEPPipe;
    }());
    CEPPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'cep',
                },] }
    ];

    var currency = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.currency(v) ? null : { currency: true };
    };

    var CURRENCY_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return CURRENCYValidator; }),
        multi: true
    };
    var CURRENCYValidator = /** @class */ (function () {
        function CURRENCYValidator() {
        }
        CURRENCYValidator.prototype.validate = function (c) {
            return currency(c);
        };
        return CURRENCYValidator;
    }());
    CURRENCYValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
                    providers: [CURRENCY_VALIDATOR]
                },] }
    ];

    var CURRENCYPipe = /** @class */ (function () {
        function CURRENCYPipe() {
        }
        CURRENCYPipe.prototype.transform = function (currencyValue, decimalValue) {
            return jsBrasil.maskBr.currency(currencyValue, decimalValue);
        };
        return CURRENCYPipe;
    }());
    CURRENCYPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'currencyBrazil',
                },] }
    ];

    var number = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.number(v) ? null : { number: true };
    };

    var NUMBER_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return NUMBERValidator; }),
        multi: true
    };
    var NUMBERValidator = /** @class */ (function () {
        function NUMBERValidator() {
        }
        NUMBERValidator.prototype.validate = function (c) {
            return number(c);
        };
        return NUMBERValidator;
    }());
    NUMBERValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[number][formControlName],[number][formControl],[number][ngModel]',
                    providers: [NUMBER_VALIDATOR]
                },] }
    ];

    var NUMBERPipe = /** @class */ (function () {
        function NUMBERPipe() {
        }
        NUMBERPipe.prototype.transform = function (numberValue, decimalValue) {
            return jsBrasil.maskBr.number(numberValue, decimalValue);
        };
        return NUMBERPipe;
    }());
    NUMBERPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'numberBrazil',
                },] }
    ];

    var placa = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.placa(v) ? null : { placa: true };
    };

    var PLACA_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        /* tslint:disable: no-use-before-declare */
        useExisting: core.forwardRef(function () { return PLACAValidator; }),
        multi: true
    };
    var PLACAValidator = /** @class */ (function () {
        function PLACAValidator() {
        }
        PLACAValidator.prototype.validate = function (c) {
            return placa(c);
        };
        return PLACAValidator;
    }());
    PLACAValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
                    providers: [PLACA_VALIDATOR]
                },] }
    ];

    var PLACAPipe = /** @class */ (function () {
        function PLACAPipe() {
        }
        PLACAPipe.prototype.transform = function (placaValue) {
            return jsBrasil.maskBr.placa(placaValue);
        };
        return PLACAPipe;
    }());
    PLACAPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'placa'
                },] }
    ];

    var percentage = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.porcentagem(v) ? null : { percentage: true };
    };

    var PERCENTAGE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return PERCENTAGEValidator; }),
        multi: true
    };
    var PERCENTAGEValidator = /** @class */ (function () {
        function PERCENTAGEValidator() {
        }
        PERCENTAGEValidator.prototype.validate = function (c) {
            return percentage(c);
        };
        return PERCENTAGEValidator;
    }());
    PERCENTAGEValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
                    providers: [PERCENTAGE_VALIDATOR]
                },] }
    ];

    var PERCENTAGEPipe = /** @class */ (function () {
        function PERCENTAGEPipe() {
        }
        PERCENTAGEPipe.prototype.transform = function (percentageValue, decimalValue) {
            return jsBrasil.maskBr.porcentagem(percentageValue, decimalValue);
        };
        return PERCENTAGEPipe;
    }());
    PERCENTAGEPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'percentage',
                },] }
    ];

    var renavam = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.renavam(v) ? null : { renavam: true };
    };

    var RENAVAM_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return RenavamValidator; }),
        multi: true
    };
    var RenavamValidator = /** @class */ (function () {
        function RenavamValidator() {
        }
        RenavamValidator.prototype.validate = function (c) {
            return renavam(c);
        };
        return RenavamValidator;
    }());
    RenavamValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
                    providers: [RENAVAM_VALIDATOR]
                },] }
    ];

    var RenavamPipe = /** @class */ (function () {
        function RenavamPipe() {
        }
        RenavamPipe.prototype.transform = function (renavamValue) {
            return jsBrasil.maskBr.renavam(renavamValue);
        };
        return RenavamPipe;
    }());
    RenavamPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'renavam',
                },] }
    ];

    var pispasep = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.pispasep(v) ? null : { pispasep: true };
    };

    var PISPASE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return PispasepValidator; }),
        multi: true
    };
    var PispasepValidator = /** @class */ (function () {
        function PispasepValidator() {
        }
        PispasepValidator.prototype.validate = function (c) {
            return pispasep(c);
        };
        return PispasepValidator;
    }());
    PispasepValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
                    providers: [PISPASE_VALIDATOR]
                },] }
    ];

    var PispasepPipe = /** @class */ (function () {
        function PispasepPipe() {
        }
        PispasepPipe.prototype.transform = function (pispasepValue) {
            return jsBrasil.maskBr.pispasep(pispasepValue);
        };
        return PispasepPipe;
    }());
    PispasepPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'pispasep',
                },] }
    ];

    var rg = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.rg(v) ? null : { rg: true };
    };

    var RG_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return RGValidator; }),
        multi: true
    };
    var RGValidator = /** @class */ (function () {
        function RGValidator() {
        }
        RGValidator.prototype.validate = function (c) {
            return rg(c);
        };
        return RGValidator;
    }());
    RGValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
                    providers: [RG_VALIDATOR]
                },] }
    ];

    var RGPipe = /** @class */ (function () {
        function RGPipe() {
        }
        RGPipe.prototype.transform = function (rgValue) {
            return jsBrasil.maskBr.rg(rgValue);
        };
        return RGPipe;
    }());
    RGPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'rg',
                },] }
    ];

    var time = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.time(v) ? null : { time: true };
    };

    var TIME_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TIMEValidator; }),
        multi: true
    };
    var TIMEValidator = /** @class */ (function () {
        function TIMEValidator() {
        }
        TIMEValidator.prototype.validate = function (c) {
            return time(c);
        };
        return TIMEValidator;
    }());
    TIMEValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[time][formControlName],[time][formControl],[time][ngModel]',
                    providers: [TIME_VALIDATOR]
                },] }
    ];

    var TIMEPipe = /** @class */ (function () {
        function TIMEPipe() {
        }
        TIMEPipe.prototype.transform = function (timeValue) {
            return jsBrasil.maskBr.time(timeValue);
        };
        return TIMEPipe;
    }());
    TIMEPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'time',
                },] }
    ];

    var titulo = function (control) {
        if (jsBrasil.utilsBr.isPresent(forms.Validators.required(control))) {
            return null;
        }
        var v = control.value;
        return jsBrasil.validateBr.titulo(v) ? null : { titulo: true };
    };

    var TITULO_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: core.forwardRef(function () { return TITULOValidator; }),
        multi: true
    };
    var TITULOValidator = /** @class */ (function () {
        function TITULOValidator() {
        }
        TITULOValidator.prototype.validate = function (c) {
            return titulo(c);
        };
        return TITULOValidator;
    }());
    TITULOValidator.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
                    providers: [TITULO_VALIDATOR]
                },] }
    ];

    var TITULOPipe = /** @class */ (function () {
        function TITULOPipe() {
        }
        TITULOPipe.prototype.transform = function (tituloValue) {
            return jsBrasil.maskBr.titulo(tituloValue);
        };
        return TITULOPipe;
    }());
    TITULOPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'titulo'
                },] }
    ];

    var conformToMask = textMask.conformToMask;
    var createTextMaskInputElement = textMask.createTextMaskInputElement;
    var TextMaskConfig = /** @class */ (function () {
        function TextMaskConfig() {
        }
        return TextMaskConfig;
    }());
    var MASKEDINPUT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        /* tslint:disable: no-use-before-declare */
        useExisting: core.forwardRef(function () { return MaskedInputDirective; }),
        multi: true
    };
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     */
    function _isAndroid() {
        var userAgent = platformBrowser.ɵgetDOM() ? platformBrowser.ɵgetDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    var MaskedInputDirective = /** @class */ (function () {
        function MaskedInputDirective(rendererFactory, _elementRef, _compositionMode) {
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.textMaskConfig = {
                mask: [],
                guide: true,
                placeholderChar: '_',
                pipe: undefined,
                keepCharPositions: false,
            };
            /** Whether the user is creating a composition string (IME events). */
            this._composing = false;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._renderer = rendererFactory.createRenderer(null, null);
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        MaskedInputDirective.prototype.ngOnChanges = function (changes) {
            this._setupMask(true);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(this.inputElement.value);
            }
        };
        MaskedInputDirective.prototype.writeValue = function (value) {
            this._setupMask();
            // set the initial value for cases where the mask is disabled
            var normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
            }
        };
        MaskedInputDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        MaskedInputDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        MaskedInputDirective.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this._setupMask();
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(value);
                    // get the updated value
                    value = this.inputElement.value;
                    this.onChange(value);
                }
            }
        };
        MaskedInputDirective.prototype._setupMask = function (create) {
            if (create === void 0) { create = false; }
            if (!this.inputElement) {
                if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                    // `textMask` directive is used directly on an input element
                    this.inputElement = this._elementRef.nativeElement;
                }
                else {
                    // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                    this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
                }
            }
            if (this.inputElement && create) {
                this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
            }
        };
        MaskedInputDirective.prototype._compositionStart = function () { this._composing = true; };
        MaskedInputDirective.prototype._compositionEnd = function (value) {
            this._composing = false;
            if (this._compositionMode) {
                this._handleInput(value);
            }
        };
        return MaskedInputDirective;
    }());
    MaskedInputDirective.decorators = [
        { type: core.Injectable },
        { type: core.Directive, args: [{
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    /* tslint:disable: directive-selector */
                    selector: '[textMask]',
                    exportAs: 'textMask',
                    providers: [MASKEDINPUT_VALUE_ACCESSOR]
                },] }
    ];
    MaskedInputDirective.ctorParameters = function () { return [
        { type: core.RendererFactory2 },
        { type: core.ElementRef },
        { type: Boolean, decorators: [{ type: core.Optional }, { type: core.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] }
    ]; };
    MaskedInputDirective.propDecorators = {
        textMaskConfig: [{ type: core.Input, args: ['textMask',] }]
    };
    var TextMaskModule = /** @class */ (function () {
        function TextMaskModule() {
        }
        return TextMaskModule;
    }());
    TextMaskModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        platformBrowser.BrowserModule
                    ],
                    declarations: [MaskedInputDirective],
                    exports: [MaskedInputDirective]
                },] }
    ];

    var TextMask = {
        TextMaskModule: TextMaskModule
    };
    var NgBrazilValidators = {
        cpf: cpf,
        cnpj: cnpj,
        celular: celular,
        cep: cep,
        currency: currency,
        inscricaoestadual: inscricaoestadual,
        number: number,
        pispasep: pispasep,
        placa: placa,
        percentage: percentage,
        renavam: renavam,
        rg: rg,
        telefone: telefone,
        time: time,
        titulo: titulo
    };
    var MASKS = jsBrasil.utilsBr.MASKS;
    var CustomDirectives = [
        CelularValidator,
        CelularPipe,
        CEPValidator,
        CEPPipe,
        CPFValidator,
        CPFPipe,
        CNPJValidator,
        CNPJPipe,
        CURRENCYValidator,
        CURRENCYPipe,
        InscricaoEstadualValidator,
        InscricaoEstadualPipe,
        NUMBERValidator,
        NUMBERPipe,
        PERCENTAGEValidator,
        PERCENTAGEPipe,
        PispasepValidator,
        PispasepPipe,
        PLACAValidator,
        PLACAPipe,
        RenavamValidator,
        RenavamPipe,
        RGValidator,
        RGPipe,
        TelefoneValidator,
        TelefonePipe,
        TIMEValidator,
        TIMEPipe,
        TITULOValidator,
        TITULOPipe
    ];
    var NgBrDirectives = {
        CelularValidator: CelularValidator,
        CelularPipe: CelularPipe,
        CEPValidator: CEPValidator,
        CEPPipe: CEPPipe,
        CNPJValidator: CNPJValidator,
        CNPJPipe: CNPJPipe,
        CPFValidator: CPFValidator,
        CPFPipe: CPFPipe,
        CURRENCYValidator: CURRENCYValidator,
        CURRENCYPipe: CURRENCYPipe,
        InscricaoEstadualValidator: InscricaoEstadualValidator,
        InscricaoEstadualPipe: InscricaoEstadualPipe,
        NUMBERValidator: NUMBERValidator,
        NUMBERPipe: NUMBERPipe,
        PERCENTAGEValidator: PERCENTAGEValidator,
        PERCENTAGEPipe: PERCENTAGEPipe,
        PispasepValidator: PispasepValidator,
        PispasepPipe: PispasepPipe,
        PLACAValidator: PLACAValidator,
        PLACAPipe: PLACAPipe,
        RGValidator: RGValidator,
        RGPipe: RGPipe,
        RenavamValidator: RenavamValidator,
        RenavamPipe: RenavamPipe,
        TelefoneValidator: TelefoneValidator,
        TelefonePipe: TelefonePipe,
        TIMEValidator: TIMEValidator,
        TIMEPipe: TIMEPipe,
        TITULOValidator: TITULOValidator,
        TITULOPipe: TITULOPipe
    };
    var NgBrazil = /** @class */ (function () {
        function NgBrazil() {
        }
        NgBrazil.forRoot = function () {
            return {
                ngModule: NgBrazil
            };
        };
        return NgBrazil;
    }());
    NgBrazil.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [
                        CustomDirectives
                    ],
                    exports: [
                        CustomDirectives
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CustomDirectives = CustomDirectives;
    exports.MASKS = MASKS;
    exports.NgBrDirectives = NgBrDirectives;
    exports.NgBrazil = NgBrazil;
    exports.NgBrazilValidators = NgBrazilValidators;
    exports.TextMask = TextMask;
    exports.ɵa = MASKEDINPUT_VALUE_ACCESSOR;
    exports.ɵb = MaskedInputDirective;
    exports.ɵba = CURRENCYValidator;
    exports.ɵbb = CURRENCYPipe;
    exports.ɵbc = InscricaoEstadualValidator;
    exports.ɵbd = InscricaoEstadualPipe;
    exports.ɵbe = NUMBERValidator;
    exports.ɵbf = NUMBERPipe;
    exports.ɵbg = PERCENTAGEValidator;
    exports.ɵbh = PERCENTAGEPipe;
    exports.ɵbi = PispasepValidator;
    exports.ɵbj = PispasepPipe;
    exports.ɵbk = PLACAValidator;
    exports.ɵbl = PLACAPipe;
    exports.ɵbm = RenavamValidator;
    exports.ɵbn = RenavamPipe;
    exports.ɵbo = RGValidator;
    exports.ɵbp = RGPipe;
    exports.ɵbq = TelefoneValidator;
    exports.ɵbr = TelefonePipe;
    exports.ɵbs = TIMEValidator;
    exports.ɵbt = TIMEPipe;
    exports.ɵbu = TITULOValidator;
    exports.ɵbv = TITULOPipe;
    exports.ɵc = TextMaskModule;
    exports.ɵd = cpf;
    exports.ɵe = cnpj;
    exports.ɵf = celular;
    exports.ɵg = cep;
    exports.ɵh = currency;
    exports.ɵi = inscricaoestadual;
    exports.ɵj = number;
    exports.ɵk = pispasep;
    exports.ɵl = placa;
    exports.ɵm = percentage;
    exports.ɵn = renavam;
    exports.ɵo = rg;
    exports.ɵp = telefone;
    exports.ɵq = time;
    exports.ɵr = titulo;
    exports.ɵs = CelularValidator;
    exports.ɵt = CelularPipe;
    exports.ɵu = CEPValidator;
    exports.ɵv = CEPPipe;
    exports.ɵw = CPFValidator;
    exports.ɵx = CPFPipe;
    exports.ɵy = CNPJValidator;
    exports.ɵz = CNPJPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-brazil.umd.js.map
