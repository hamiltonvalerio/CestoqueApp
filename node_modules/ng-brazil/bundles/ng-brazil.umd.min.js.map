{"version":3,"sources":["../../../ng-brazil/src/cpf/validator.ts","../../../ng-brazil/src/cpf/directive.ts","../../../ng-brazil/src/cpf/pipe.ts","../../../ng-brazil/src/cnpj/validator.ts","../../../ng-brazil/src/cnpj/directive.ts","../../../ng-brazil/src/cnpj/pipe.ts","../../../ng-brazil/src/telefone/validator.ts","../../../ng-brazil/src/telefone/directive.ts","../../../ng-brazil/src/telefone/pipe.ts","../../../ng-brazil/src/celular/validator.ts","../../../ng-brazil/src/celular/directive.ts","../../../ng-brazil/src/celular/pipe.ts","../../../ng-brazil/src/inscricaoestadual/validator.ts","../../../ng-brazil/src/inscricaoestadual/directive.ts","../../../ng-brazil/src/inscricaoestadual/pipe.ts","../../../ng-brazil/src/cep/validator.ts","../../../ng-brazil/src/cep/directive.ts","../../../ng-brazil/src/cep/pipe.ts","../../../ng-brazil/src/currency/validator.ts","../../../ng-brazil/src/currency/directive.ts","../../../ng-brazil/src/currency/pipe.ts","../../../ng-brazil/src/number/validator.ts","../../../ng-brazil/src/number/directive.ts","../../../ng-brazil/src/number/pipe.ts","../../../ng-brazil/src/placa/validator.ts","../../../ng-brazil/src/placa/directive.ts","../../../ng-brazil/src/placa/pipe.ts","../../../ng-brazil/src/percentage/validator.ts","../../../ng-brazil/src/percentage/directive.ts","../../../ng-brazil/src/percentage/pipe.ts","../../../ng-brazil/src/renavam/validator.ts","../../../ng-brazil/src/renavam/directive.ts","../../../ng-brazil/src/renavam/pipe.ts","../../../ng-brazil/src/pispasep/validator.ts","../../../ng-brazil/src/pispasep/directive.ts","../../../ng-brazil/src/pispasep/pipe.ts","../../../ng-brazil/src/rg/validator.ts","../../../ng-brazil/src/rg/directive.ts","../../../ng-brazil/src/rg/pipe.ts","../../../ng-brazil/src/time/validator.ts","../../../ng-brazil/src/time/directive.ts","../../../ng-brazil/src/time/pipe.ts","../../../ng-brazil/src/titulo/validator.ts","../../../ng-brazil/src/titulo/directive.ts","../../../ng-brazil/src/titulo/pipe.ts","../../../ng-brazil/src/angular2TextMask.ts","../../../ng-brazil/src/lib.module.ts"],"names":["cpf","control","utilsBr","isPresent","Validators","required","v","value","validateBr","CPF_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","CPFValidator","multi","prototype","validate","c","Directive","args","selector","providers","CPFPipe","transform","cpfValue","maskBr","Pipe","name","cnpj","CNPJ_VALIDATOR","CNPJValidator","CNPJPipe","cnpjValue","telefone","TELEFONE_VALIDATOR","TelefoneValidator","TelefonePipe","telefoneValue","celular","CELULAR_VALIDATOR","CelularValidator","CelularPipe","celularValue","inscricaoestadual","estado","INSCRICAOESTADUAL_VALIDATOR","InscricaoEstadualValidator","InscricaoEstadualPipe","inscricaoestadualValue","cep","CEP_VALIDATOR","CEPValidator","CEPPipe","cepValue","currency","CURRENCY_VALIDATOR","CURRENCYValidator","CURRENCYPipe","currencyValue","decimalValue","number","NUMBER_VALIDATOR","NUMBERValidator","NUMBERPipe","numberValue","placa","PLACA_VALIDATOR","PLACAValidator","PLACAPipe","placaValue","percentage","porcentagem","PERCENTAGE_VALIDATOR","PERCENTAGEValidator","PERCENTAGEPipe","percentageValue","renavam","RENAVAM_VALIDATOR","RenavamValidator","RenavamPipe","renavamValue","pispasep","PISPASE_VALIDATOR","PispasepValidator","PispasepPipe","pispasepValue","rg","RG_VALIDATOR","RGValidator","RGPipe","rgValue","time","TIME_VALIDATOR","TIMEValidator","TIMEPipe","timeValue","titulo","TITULO_VALIDATOR","TITULOValidator","TITULOPipe","tituloValue","textMask.conformToMask","createTextMaskInputElement","textMask.createTextMaskInputElement","MASKEDINPUT_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MaskedInputDirective","rendererFactory","_elementRef","_compositionMode","userAgent","this","textMaskConfig","mask","guide","placeholderChar","pipe","undefined","keepCharPositions","_composing","onChange","_","onTouched","_renderer","createRenderer","getDOM","getUserAgent","test","toLowerCase","ngOnChanges","changes","_setupMask","textMaskInputElement","update","inputElement","writeValue","normalizedValue","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","_handleInput","create","tagName","toUpperCase","getElementsByTagName","Object","assign","_compositionStart","_compositionEnd","Injectable","host","(input)","(blur)","(compositionstart)","(compositionend)","exportAs","RendererFactory2","ElementRef","Optional","type","Inject","COMPOSITION_BUFFER_MODE","Input","NgModule","imports","BrowserModule","declarations","exports","TextMask","TextMaskModule","NgBrazilValidators","MASKS","CustomDirectives","NgBrDirectives","NgBrazil","forRoot","ngModule"],"mappings":"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","sourcesContent":["import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const cpf: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.cpf(v) ? null : {cpf: true};\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { cpf } from './validator';\n\nconst CPF_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CPFValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',\n  providers: [CPF_VALIDATOR]\n})\nexport class CPFValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return cpf(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'cpf',\n})\nexport class CPFPipe implements PipeTransform {\n    transform(cpfValue: any) {\n      return maskBr.cpf(cpfValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const cnpj: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.cnpj(v) ? null : {cnpj: true};\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { cnpj } from './validator';\n\n\nconst CNPJ_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CNPJValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',\n  providers: [CNPJ_VALIDATOR]\n})\nexport class CNPJValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return cnpj(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'cnpj',\n})\nexport class CNPJPipe implements PipeTransform {\n    transform(cnpjValue: any) {\n      return maskBr.cnpj(cnpjValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const telefone: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.telefone(v) ? null : { telefone: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { telefone } from './validator';\n\nconst TELEFONE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TelefoneValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',\n  providers: [TELEFONE_VALIDATOR]\n})\nexport class TelefoneValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return telefone(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'telefone',\n})\nexport class TelefonePipe implements PipeTransform {\n    transform(telefoneValue: any) {\n        return maskBr.telefone(telefoneValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const celular: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.celular(v) ? null : { celular: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { celular } from './validator';\n\nconst CELULAR_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CelularValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',\n  providers: [CELULAR_VALIDATOR]\n})\nexport class CelularValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return celular(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'celular',\n})\nexport class CelularPipe implements PipeTransform {\n    transform(celularValue: any) {\n        return maskBr.celular(celularValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const inscricaoestadual = (estado: string):\n  ValidatorFn => {\n    return (control: AbstractControl): { [key: string]: boolean } => {\n      if (utilsBr.isPresent(Validators.required(control))) {\n        return null;\n      }\n      const v: string = control.value;\n      return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };\n    };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { inscricaoestadual } from './validator';\n\n\nconst INSCRICAOESTADUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => InscricaoEstadualValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',\n  providers: [INSCRICAOESTADUAL_VALIDATOR]\n})\nexport class InscricaoEstadualValidator implements Validator {\n  validate(c: AbstractControl): { [key: string]: any } {\n    return inscricaoestadual('mg')(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'inscricaoestadual',\n})\nexport class InscricaoEstadualPipe implements PipeTransform {\n  transform(inscricaoestadualValue: any, estado: any) {\n    return maskBr.inscricaoestadual(inscricaoestadualValue, estado);\n  }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const cep: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.cep(v) ? null : { cep: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { cep } from './validator';\n\nconst CEP_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CEPValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',\n  providers: [CEP_VALIDATOR]\n})\nexport class CEPValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return cep(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'cep',\n})\nexport class CEPPipe implements PipeTransform {\n    transform(cepValue: any) {\n        return maskBr.cep(cepValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const currency: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.currency(v) ? null : { currency: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { currency } from './validator';\n\nconst CURRENCY_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CURRENCYValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',\n  providers: [CURRENCY_VALIDATOR]\n})\nexport class CURRENCYValidator implements Validator {\n  validate(c: AbstractControl): { [key: string]: any } {\n    return currency(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'currencyBrazil',\n})\nexport class CURRENCYPipe implements PipeTransform {\n  transform(currencyValue: any, decimalValue: any) {\n    return maskBr.currency(currencyValue, decimalValue);\n  }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const number: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.number(v) ? null : { number: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { number } from './validator';\n\nconst NUMBER_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => NUMBERValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n  providers: [NUMBER_VALIDATOR]\n})\nexport class NUMBERValidator implements Validator {\n  validate(c: AbstractControl): { [key: string]: any } {\n    return number(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'numberBrazil',\n})\nexport class NUMBERPipe implements PipeTransform {\n  transform(numberValue: any, decimalValue: any) {\n    return maskBr.number(numberValue, decimalValue);\n  }\n}\n","import { AbstractControl, Validators, ValidatorFn, RequiredValidator } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const placa: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n    if (utilsBr.isPresent(Validators.required(control))) {\n        return null;\n    }\n\n    const v: string = control.value;\n    return validateBr.placa(v) ? null : {placa: true};\n}\n","import { Directive, forwardRef} from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { placa } from './validator';\n\nconst PLACA_VALIDATOR: any = {\n    provide: NG_VALIDATORS,\n    /* tslint:disable: no-use-before-declare */\n    useExisting: forwardRef(() => PLACAValidator),\n    multi: true\n};\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',\n    providers: [PLACA_VALIDATOR]\n})\nexport class PLACAValidator implements Validator {\n    validate(c: AbstractControl): {[key: string]: any} {\n        return placa(c);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'placa'\n})\nexport class PLACAPipe implements PipeTransform {\n  transform(placaValue: any) {\n    return maskBr.placa(placaValue);\n  }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const percentage: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.porcentagem(v) ? null : { percentage: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { percentage } from './validator';\n\nconst PERCENTAGE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => PERCENTAGEValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',\n  providers: [PERCENTAGE_VALIDATOR]\n})\nexport class PERCENTAGEValidator implements Validator {\n  validate(c: AbstractControl): { [key: string]: any } {\n    return percentage(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'percentage',\n})\nexport class PERCENTAGEPipe implements PipeTransform {\n  transform(percentageValue: any, decimalValue: any) {\n    return maskBr.porcentagem(percentageValue, decimalValue);\n  }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const renavam: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.renavam(v) ? null : { renavam: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { renavam } from './validator';\n\nconst RENAVAM_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => RenavamValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',\n  providers: [RENAVAM_VALIDATOR]\n})\nexport class RenavamValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return renavam(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'renavam',\n})\nexport class RenavamPipe implements PipeTransform {\n    transform(renavamValue: any) {\n        return maskBr.renavam(renavamValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const pispasep: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.pispasep(v) ? null : { pispasep: true };\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { pispasep } from './validator';\n\nconst PISPASE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => PispasepValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',\n  providers: [PISPASE_VALIDATOR]\n})\nexport class PispasepValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return pispasep(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'pispasep',\n})\nexport class PispasepPipe implements PipeTransform {\n    transform(pispasepValue: any) {\n        return maskBr.pispasep(pispasepValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const rg: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.rg(v) ? null : {rg: true};\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { rg } from './validator';\n\nconst RG_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => RGValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',\n  providers: [RG_VALIDATOR]\n})\nexport class RGValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return rg(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'rg',\n})\nexport class RGPipe implements PipeTransform {\n    transform(rgValue: any) {\n      return maskBr.rg(rgValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const time: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return validateBr.time(v) ? null : {time: true};\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { time } from './validator';\n\nconst TIME_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TIMEValidator),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[time][formControlName],[time][formControl],[time][ngModel]',\n  providers: [TIME_VALIDATOR]\n})\nexport class TIMEValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return time(c);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n    name: 'time',\n})\nexport class TIMEPipe implements PipeTransform {\n    transform(timeValue: any) {\n        return maskBr.time(timeValue);\n    }\n}\n","import { AbstractControl, Validators, ValidatorFn, RequiredValidator } from '@angular/forms';\nimport { utilsBr, validateBr } from 'js-brasil';\n\nexport const titulo: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n    if (utilsBr.isPresent(Validators.required(control))) {\n        return null;\n    }\n\n    const v: string = control.value;\n    return validateBr.titulo(v) ? null : {titulo: true};\n}\n","import { Directive, forwardRef} from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { titulo } from './validator';\n\nconst TITULO_VALIDATOR: any = {\n    provide: NG_VALIDATORS,\n    // tslint:disable-next-line: no-use-before-declare\n    useExisting: forwardRef(() => TITULOValidator),\n    multi: true\n};\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',\n    providers: [TITULO_VALIDATOR]\n})\nexport class TITULOValidator implements Validator {\n    validate(c: AbstractControl): {[key: string]: any} {\n        return titulo(c);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { maskBr } from 'js-brasil';\n\n@Pipe({\n  name: 'titulo'\n})\nexport class TITULOPipe implements PipeTransform {\n  transform(tituloValue: any) {\n    return maskBr.titulo(tituloValue);\n  }\n}\n","import {\n  Directive, ElementRef, forwardRef, Input, Inject, NgModule,\n  OnChanges, Optional, Provider, SimpleChanges, Injectable, RendererFactory2\n} from '@angular/core'\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms'\nimport { ɵgetDOM as getDOM, BrowserModule } from '@angular/platform-browser'\n\nimport * as textMask from 'text-mask-core'\nexport const conformToMask=textMask.conformToMask;\nconst { createTextMaskInputElement } = textMask;\nexport class TextMaskConfig {\n  mask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false\n  guide?: boolean\n  placeholderChar?: string\n  pipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object\n  keepCharPositions?: boolean\n  showMask?: boolean\n}\n\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable: no-use-before-declare */\n  useExisting: forwardRef(() => MaskedInputDirective),\n  multi: true\n}\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : ''\n  return /android (\\d+)/.test(userAgent.toLowerCase())\n}\n\n@Injectable()\n@Directive({\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  /* tslint:disable: directive-selector */\n  selector: '[textMask]',\n  exportAs: 'textMask',\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\n})\nexport class MaskedInputDirective implements ControlValueAccessor, OnChanges {\n  @Input('textMask') textMaskConfig: TextMaskConfig = {\n    mask: [],\n    guide: true,\n    placeholderChar: '_',\n    pipe: undefined,\n    keepCharPositions: false,\n  }\n\n  private textMaskInputElement: any\n  private inputElement: HTMLInputElement\n  private _renderer: any;\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false\n\n  constructor(\n    rendererFactory: RendererFactory2,\n    private _elementRef: ElementRef,\n    @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean\n  ) {\n    this._renderer = rendererFactory.createRenderer(null, null);\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid()\n    }\n  }\n\n  onChange = (_: any) => { }\n  onTouched = () => { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._setupMask(true)\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value)\n    }\n  }\n\n  writeValue(value: any) {\n    this._setupMask()\n\n    // set the initial value for cases where the mask is disabled\n    const normalizedValue = value == null ? '' : value\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue)\n\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value)\n    }\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled)\n  }\n\n\n  _handleInput(value) {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this._setupMask()\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value)\n\n        // get the updated value\n        value = this.inputElement.value\n        this.onChange(value)\n      }\n    }\n  }\n\n  _setupMask(create = false) {\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0]\n      }\n    }\n\n    if (this.inputElement && create) {\n      this.textMaskInputElement = createTextMaskInputElement(\n        Object.assign({ inputElement: this.inputElement }, this.textMaskConfig)\n      )\n    }\n\n  }\n\n  _compositionStart(): void { this._composing = true }\n\n  _compositionEnd(value: any): void {\n    this._composing = false\n    if (this._compositionMode) {\n      this._handleInput(value)\n    }\n  }\n}\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [MaskedInputDirective],\n  exports: [MaskedInputDirective]\n})\nexport class TextMaskModule { }\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { cpf } from './cpf/validator';\nimport { CPFValidator } from './cpf/directive';\nimport { CPFPipe } from './cpf/pipe';\n\nimport { cnpj } from './cnpj/validator';\nimport { CNPJValidator } from './cnpj/directive';\nimport { CNPJPipe } from './cnpj/pipe';\n\nimport { telefone } from './telefone/validator';\nimport { TelefoneValidator } from './telefone/directive';\nimport { TelefonePipe } from './telefone/pipe';\n\nimport { celular } from './celular/validator';\nimport { CelularValidator } from './celular/directive';\nimport { CelularPipe } from './celular/pipe';\n\nimport { inscricaoestadual } from './inscricaoestadual/validator';\nimport { InscricaoEstadualValidator } from './inscricaoestadual/directive';\nimport { InscricaoEstadualPipe } from './inscricaoestadual/pipe';\n\nimport { CEPValidator } from './cep/directive';\nimport { CEPPipe } from './cep/pipe';\nimport { cep } from './cep/validator';\n\n\nimport { currency } from './currency/validator';\nimport { CURRENCYValidator } from './currency/directive';\nimport { CURRENCYPipe } from './currency/pipe';\n\nimport { number } from './number/validator';\nimport { NUMBERValidator } from './number/directive';\nimport { NUMBERPipe } from './number/pipe';\n\n\n\nimport { placa } from './placa/validator';\nimport { PLACAValidator } from './placa/directive';\nimport { PLACAPipe } from './placa/pipe';\n\nimport { percentage } from './percentage/validator';\nimport { PERCENTAGEValidator } from './percentage/directive';\nimport { PERCENTAGEPipe } from './percentage/pipe';\n\nimport { renavam } from './renavam/validator';\nimport { RenavamValidator } from './renavam/directive';\nimport { RenavamPipe } from './renavam/pipe';\n\nimport { pispasep } from './pispasep/validator';\nimport { PispasepValidator } from './pispasep/directive';\nimport { PispasepPipe } from './pispasep/pipe';\n\nimport { rg } from './rg/validator';\nimport { RGValidator } from './rg/directive';\nimport { RGPipe } from './rg/pipe';\n\nimport { time } from './time/validator';\nimport { TIMEValidator } from './time/directive';\nimport { TIMEPipe } from './time/pipe';\n\nimport { titulo } from './titulo/validator';\nimport { TITULOValidator } from './titulo/directive';\nimport { TITULOPipe } from './titulo/pipe';\nimport { utilsBr } from 'js-brasil';\nimport { TextMaskModule } from './angular2TextMask';\n\nexport const TextMask = {\n  TextMaskModule\n};\n\nexport const NgBrazilValidators: any = {\n  cpf,\n  cnpj,\n  celular,\n  cep,\n  currency,\n  inscricaoestadual,\n  number,\n  pispasep,\n  placa,\n  percentage,\n  renavam,\n  rg,\n  telefone,\n  time,\n  titulo\n}\n\nexport const MASKS = utilsBr.MASKS;\nexport const CustomDirectives = [\n  CelularValidator,\n  CelularPipe,\n  CEPValidator,\n  CEPPipe,\n  CPFValidator,\n  CPFPipe,\n  CNPJValidator,\n  CNPJPipe,\n  CURRENCYValidator,\n  CURRENCYPipe,\n  InscricaoEstadualValidator,\n  InscricaoEstadualPipe,\n  NUMBERValidator,\n  NUMBERPipe,\n  PERCENTAGEValidator,\n  PERCENTAGEPipe,\n  PispasepValidator,\n  PispasepPipe,\n  PLACAValidator,\n  PLACAPipe,\n  RenavamValidator,\n  RenavamPipe,\n  RGValidator,\n  RGPipe,\n  TelefoneValidator,\n  TelefonePipe,\n  TIMEValidator,\n  TIMEPipe,\n  TITULOValidator,\n  TITULOPipe\n];\n\nexport const NgBrDirectives = {\n  CelularValidator,\n  CelularPipe,\n  CEPValidator,\n  CEPPipe,\n  CNPJValidator,\n  CNPJPipe,\n  CPFValidator,\n  CPFPipe,\n  CURRENCYValidator,\n  CURRENCYPipe,\n  InscricaoEstadualValidator,\n  InscricaoEstadualPipe,\n  NUMBERValidator,\n  NUMBERPipe,\n  PERCENTAGEValidator,\n  PERCENTAGEPipe,\n  PispasepValidator,\n  PispasepPipe,\n  PLACAValidator,\n  PLACAPipe,\n  RGValidator,\n  RGPipe,\n  RenavamValidator,\n  RenavamPipe,\n  TelefoneValidator,\n  TelefonePipe,\n  TIMEValidator,\n  TIMEPipe,\n  TITULOValidator,\n  TITULOPipe\n};\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    CustomDirectives\n  ],\n  exports: [\n    CustomDirectives\n  ]\n})\nclass NgBrazil {\n  public static forRoot(): ModuleWithProviders<NgBrazil> {\n    return {\n      ngModule: NgBrazil\n    };\n  }\n}\nexport {\n  NgBrazil\n}\n"]}