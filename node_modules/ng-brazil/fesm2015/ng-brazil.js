import { forwardRef, Directive, Pipe, Injectable, RendererFactory2, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';
import { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { utilsBr, validateBr, maskBr } from 'js-brasil';
import { ÉµgetDOM, BrowserModule } from '@angular/platform-browser';
import * as textMask from 'text-mask-core';
import { conformToMask as conformToMask$1 } from 'text-mask-core';

const cpf = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cpf(v) ? null : { cpf: true };
};

const CPF_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CPFValidator),
    multi: true
};
class CPFValidator {
    validate(c) {
        return cpf(c);
    }
}
CPFValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',
                providers: [CPF_VALIDATOR]
            },] }
];

class CPFPipe {
    transform(cpfValue) {
        return maskBr.cpf(cpfValue);
    }
}
CPFPipe.decorators = [
    { type: Pipe, args: [{
                name: 'cpf',
            },] }
];

const cnpj = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cnpj(v) ? null : { cnpj: true };
};

const CNPJ_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CNPJValidator),
    multi: true
};
class CNPJValidator {
    validate(c) {
        return cnpj(c);
    }
}
CNPJValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',
                providers: [CNPJ_VALIDATOR]
            },] }
];

class CNPJPipe {
    transform(cnpjValue) {
        return maskBr.cnpj(cnpjValue);
    }
}
CNPJPipe.decorators = [
    { type: Pipe, args: [{
                name: 'cnpj',
            },] }
];

const telefone = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.telefone(v) ? null : { telefone: true };
};

const TELEFONE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TelefoneValidator),
    multi: true
};
class TelefoneValidator {
    validate(c) {
        return telefone(c);
    }
}
TelefoneValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[telefone][formControlName],[telefone][formControl],[telefone][ngModel]',
                providers: [TELEFONE_VALIDATOR]
            },] }
];

class TelefonePipe {
    transform(telefoneValue) {
        return maskBr.telefone(telefoneValue);
    }
}
TelefonePipe.decorators = [
    { type: Pipe, args: [{
                name: 'telefone',
            },] }
];

const celular = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.celular(v) ? null : { celular: true };
};

const CELULAR_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CelularValidator),
    multi: true
};
class CelularValidator {
    validate(c) {
        return celular(c);
    }
}
CelularValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[celular][formControlName],[celular][formControl],[celular][ngModel]',
                providers: [CELULAR_VALIDATOR]
            },] }
];

class CelularPipe {
    transform(celularValue) {
        return maskBr.celular(celularValue);
    }
}
CelularPipe.decorators = [
    { type: Pipe, args: [{
                name: 'celular',
            },] }
];

const inscricaoestadual = (estado) => {
    return (control) => {
        if (utilsBr.isPresent(Validators.required(control))) {
            return null;
        }
        const v = control.value;
        return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };
    };
};

const INSCRICAOESTADUAL_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => InscricaoEstadualValidator),
    multi: true
};
class InscricaoEstadualValidator {
    validate(c) {
        return inscricaoestadual('mg')(c);
    }
}
InscricaoEstadualValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',
                providers: [INSCRICAOESTADUAL_VALIDATOR]
            },] }
];

class InscricaoEstadualPipe {
    transform(inscricaoestadualValue, estado) {
        return maskBr.inscricaoestadual(inscricaoestadualValue, estado);
    }
}
InscricaoEstadualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'inscricaoestadual',
            },] }
];

const cep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.cep(v) ? null : { cep: true };
};

const CEP_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CEPValidator),
    multi: true
};
class CEPValidator {
    validate(c) {
        return cep(c);
    }
}
CEPValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',
                providers: [CEP_VALIDATOR]
            },] }
];

class CEPPipe {
    transform(cepValue) {
        return maskBr.cep(cepValue);
    }
}
CEPPipe.decorators = [
    { type: Pipe, args: [{
                name: 'cep',
            },] }
];

const currency = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.currency(v) ? null : { currency: true };
};

const CURRENCY_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => CURRENCYValidator),
    multi: true
};
class CURRENCYValidator {
    validate(c) {
        return currency(c);
    }
}
CURRENCYValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',
                providers: [CURRENCY_VALIDATOR]
            },] }
];

class CURRENCYPipe {
    transform(currencyValue, decimalValue) {
        return maskBr.currency(currencyValue, decimalValue);
    }
}
CURRENCYPipe.decorators = [
    { type: Pipe, args: [{
                name: 'currencyBrazil',
            },] }
];

const number = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.number(v) ? null : { number: true };
};

const NUMBER_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => NUMBERValidator),
    multi: true
};
class NUMBERValidator {
    validate(c) {
        return number(c);
    }
}
NUMBERValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[number][formControlName],[number][formControl],[number][ngModel]',
                providers: [NUMBER_VALIDATOR]
            },] }
];

class NUMBERPipe {
    transform(numberValue, decimalValue) {
        return maskBr.number(numberValue, decimalValue);
    }
}
NUMBERPipe.decorators = [
    { type: Pipe, args: [{
                name: 'numberBrazil',
            },] }
];

const placa = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.placa(v) ? null : { placa: true };
};

const PLACA_VALIDATOR = {
    provide: NG_VALIDATORS,
    /* tslint:disable: no-use-before-declare */
    useExisting: forwardRef(() => PLACAValidator),
    multi: true
};
class PLACAValidator {
    validate(c) {
        return placa(c);
    }
}
PLACAValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[placa][formControlName],[placa][formControl],[placa][ngModel]',
                providers: [PLACA_VALIDATOR]
            },] }
];

class PLACAPipe {
    transform(placaValue) {
        return maskBr.placa(placaValue);
    }
}
PLACAPipe.decorators = [
    { type: Pipe, args: [{
                name: 'placa'
            },] }
];

const percentage = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.porcentagem(v) ? null : { percentage: true };
};

const PERCENTAGE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PERCENTAGEValidator),
    multi: true
};
class PERCENTAGEValidator {
    validate(c) {
        return percentage(c);
    }
}
PERCENTAGEValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',
                providers: [PERCENTAGE_VALIDATOR]
            },] }
];

class PERCENTAGEPipe {
    transform(percentageValue, decimalValue) {
        return maskBr.porcentagem(percentageValue, decimalValue);
    }
}
PERCENTAGEPipe.decorators = [
    { type: Pipe, args: [{
                name: 'percentage',
            },] }
];

const renavam = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.renavam(v) ? null : { renavam: true };
};

const RENAVAM_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RenavamValidator),
    multi: true
};
class RenavamValidator {
    validate(c) {
        return renavam(c);
    }
}
RenavamValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',
                providers: [RENAVAM_VALIDATOR]
            },] }
];

class RenavamPipe {
    transform(renavamValue) {
        return maskBr.renavam(renavamValue);
    }
}
RenavamPipe.decorators = [
    { type: Pipe, args: [{
                name: 'renavam',
            },] }
];

const pispasep = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.pispasep(v) ? null : { pispasep: true };
};

const PISPASE_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => PispasepValidator),
    multi: true
};
class PispasepValidator {
    validate(c) {
        return pispasep(c);
    }
}
PispasepValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',
                providers: [PISPASE_VALIDATOR]
            },] }
];

class PispasepPipe {
    transform(pispasepValue) {
        return maskBr.pispasep(pispasepValue);
    }
}
PispasepPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pispasep',
            },] }
];

const rg = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.rg(v) ? null : { rg: true };
};

const RG_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => RGValidator),
    multi: true
};
class RGValidator {
    validate(c) {
        return rg(c);
    }
}
RGValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',
                providers: [RG_VALIDATOR]
            },] }
];

class RGPipe {
    transform(rgValue) {
        return maskBr.rg(rgValue);
    }
}
RGPipe.decorators = [
    { type: Pipe, args: [{
                name: 'rg',
            },] }
];

const time = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.time(v) ? null : { time: true };
};

const TIME_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TIMEValidator),
    multi: true
};
class TIMEValidator {
    validate(c) {
        return time(c);
    }
}
TIMEValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[time][formControlName],[time][formControl],[time][ngModel]',
                providers: [TIME_VALIDATOR]
            },] }
];

class TIMEPipe {
    transform(timeValue) {
        return maskBr.time(timeValue);
    }
}
TIMEPipe.decorators = [
    { type: Pipe, args: [{
                name: 'time',
            },] }
];

const titulo = (control) => {
    if (utilsBr.isPresent(Validators.required(control))) {
        return null;
    }
    const v = control.value;
    return validateBr.titulo(v) ? null : { titulo: true };
};

const TITULO_VALIDATOR = {
    provide: NG_VALIDATORS,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => TITULOValidator),
    multi: true
};
class TITULOValidator {
    validate(c) {
        return titulo(c);
    }
}
TITULOValidator.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',
                providers: [TITULO_VALIDATOR]
            },] }
];

class TITULOPipe {
    transform(tituloValue) {
        return maskBr.titulo(tituloValue);
    }
}
TITULOPipe.decorators = [
    { type: Pipe, args: [{
                name: 'titulo'
            },] }
];

const conformToMask = conformToMask$1;
const { createTextMaskInputElement } = textMask;
class TextMaskConfig {
}
const MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable: no-use-before-declare */
    useExisting: forwardRef(() => MaskedInputDirective),
    multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
    const userAgent = ÉµgetDOM() ? ÉµgetDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
class MaskedInputDirective {
    constructor(rendererFactory, _elementRef, _compositionMode) {
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.textMaskConfig = {
            mask: [],
            guide: true,
            placeholderChar: '_',
            pipe: undefined,
            keepCharPositions: false,
        };
        /** Whether the user is creating a composition string (IME events). */
        this._composing = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this._renderer = rendererFactory.createRenderer(null, null);
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    ngOnChanges(changes) {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    }
    writeValue(value) {
        this._setupMask();
        // set the initial value for cases where the mask is disabled
        const normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(value);
        }
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    _handleInput(value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this._setupMask();
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
                // get the updated value
                value = this.inputElement.value;
                this.onChange(value);
            }
        }
    }
    _setupMask(create = false) {
        if (!this.inputElement) {
            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                // `textMask` directive is used directly on an input element
                this.inputElement = this._elementRef.nativeElement;
            }
            else {
                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
            }
        }
        if (this.inputElement && create) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
        }
    }
    _compositionStart() { this._composing = true; }
    _compositionEnd(value) {
        this._composing = false;
        if (this._compositionMode) {
            this._handleInput(value);
        }
    }
}
MaskedInputDirective.decorators = [
    { type: Injectable },
    { type: Directive, args: [{
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                /* tslint:disable: directive-selector */
                selector: '[textMask]',
                exportAs: 'textMask',
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            },] }
];
MaskedInputDirective.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ElementRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
];
MaskedInputDirective.propDecorators = {
    textMaskConfig: [{ type: Input, args: ['textMask',] }]
};
class TextMaskModule {
}
TextMaskModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    BrowserModule
                ],
                declarations: [MaskedInputDirective],
                exports: [MaskedInputDirective]
            },] }
];

const TextMask = {
    TextMaskModule
};
const NgBrazilValidators = {
    cpf,
    cnpj,
    celular,
    cep,
    currency,
    inscricaoestadual,
    number,
    pispasep,
    placa,
    percentage,
    renavam,
    rg,
    telefone,
    time,
    titulo
};
const MASKS = utilsBr.MASKS;
const CustomDirectives = [
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CPFValidator,
    CPFPipe,
    CNPJValidator,
    CNPJPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RenavamValidator,
    RenavamPipe,
    RGValidator,
    RGPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
];
const NgBrDirectives = {
    CelularValidator,
    CelularPipe,
    CEPValidator,
    CEPPipe,
    CNPJValidator,
    CNPJPipe,
    CPFValidator,
    CPFPipe,
    CURRENCYValidator,
    CURRENCYPipe,
    InscricaoEstadualValidator,
    InscricaoEstadualPipe,
    NUMBERValidator,
    NUMBERPipe,
    PERCENTAGEValidator,
    PERCENTAGEPipe,
    PispasepValidator,
    PispasepPipe,
    PLACAValidator,
    PLACAPipe,
    RGValidator,
    RGPipe,
    RenavamValidator,
    RenavamPipe,
    TelefoneValidator,
    TelefonePipe,
    TIMEValidator,
    TIMEPipe,
    TITULOValidator,
    TITULOPipe
};
class NgBrazil {
    static forRoot() {
        return {
            ngModule: NgBrazil
        };
    }
}
NgBrazil.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [
                    CustomDirectives
                ],
                exports: [
                    CustomDirectives
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CustomDirectives, MASKS, NgBrDirectives, NgBrazil, NgBrazilValidators, TextMask, MASKEDINPUT_VALUE_ACCESSOR as Éµa, MaskedInputDirective as Éµb, CURRENCYValidator as Éµba, CURRENCYPipe as Éµbb, InscricaoEstadualValidator as Éµbc, InscricaoEstadualPipe as Éµbd, NUMBERValidator as Éµbe, NUMBERPipe as Éµbf, PERCENTAGEValidator as Éµbg, PERCENTAGEPipe as Éµbh, PispasepValidator as Éµbi, PispasepPipe as Éµbj, PLACAValidator as Éµbk, PLACAPipe as Éµbl, RenavamValidator as Éµbm, RenavamPipe as Éµbn, RGValidator as Éµbo, RGPipe as Éµbp, TelefoneValidator as Éµbq, TelefonePipe as Éµbr, TIMEValidator as Éµbs, TIMEPipe as Éµbt, TITULOValidator as Éµbu, TITULOPipe as Éµbv, TextMaskModule as Éµc, cpf as Éµd, cnpj as Éµe, celular as Éµf, cep as Éµg, currency as Éµh, inscricaoestadual as Éµi, number as Éµj, pispasep as Éµk, placa as Éµl, percentage as Éµm, renavam as Éµn, rg as Éµo, telefone as Éµp, time as Éµq, titulo as Éµr, CelularValidator as Éµs, CelularPipe as Éµt, CEPValidator as Éµu, CEPPipe as Éµv, CPFValidator as Éµw, CPFPipe as Éµx, CNPJValidator as Éµy, CNPJPipe as Éµz };
//# sourceMappingURL=ng-brazil.js.map
