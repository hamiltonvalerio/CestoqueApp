(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ionic-angular'), require('@angular/forms'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'ionic-angular', '@angular/forms', '@angular/common'], factory) :
	(factory((global['ion-mask'] = {}),global.core,global.ionicAngular,global.forms,global.common));
}(this, (function (exports,core,ionicAngular,forms,common) { 'use strict';

var config = new core.InjectionToken('config');
var initialConfig = {
    clearIfNotMatch: false,
    dropSpecialCharacters: true,
    specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+'],
    patterns: {
        '0': {
            pattern: new RegExp('\\d'),
        },
        '9': {
            pattern: new RegExp('\\d'),
            optional: true
        },
        'A': {
            pattern: new RegExp('\[a-zA-Z0-9\]')
        },
        'S': {
            pattern: new RegExp('\[a-zA-Z\]')
        }
    }
};

var IonMaskService = (function () {
    function IonMaskService() {
        this.maskExpression = '';
        this._shift = new Set();
        this.onTouch = function () { };
        this.clearIfNotMatch = initialConfig.clearIfNotMatch;
        this.dropSpecialCharacters = initialConfig.dropSpecialCharacters;
        this.maskSpecialCharacters = initialConfig.specialCharacters;
        this.maskAvailablePatterns = initialConfig.patterns;
        this._regExpForRemove = new RegExp(this.maskSpecialCharacters
            .map(function (item) { return "\\" + item; })
            .join('|'), 'gi');
    }
    /**
     * @param {?} inputValue
     * @param {?} maskExpression
     * @param {?=} position
     * @param {?=} cb
     * @return {?}
     */
    IonMaskService.prototype.applyMask = function (inputValue, maskExpression, position, cb) {
        if (position === void 0) { position = 0; }
        if (cb === void 0) { cb = function () { }; }
        if (inputValue === undefined || inputValue === null) {
            return '';
        }
        var /** @type {?} */ cursor = 0;
        var /** @type {?} */ result = '';
        var /** @type {?} */ inputArray = inputValue.toString()
            .split('');
        // tslint:disable-next-line
        for (var /** @type {?} */ i = 0, /** @type {?} */ inputSymbol = inputArray[0]; i
            < inputArray.length; i++, inputSymbol = inputArray[i]) {
            if (result.length === maskExpression.length) {
                break;
            }
            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {
                result += inputSymbol;
                cursor++;
            }
            else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {
                result += maskExpression[cursor];
                cursor++;
                this._shift.add(cursor);
                i--;
            }
            else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1
                && this.maskAvailablePatterns[maskExpression[cursor]]
                && this.maskAvailablePatterns[maskExpression[cursor]].optional) {
                cursor++;
                i--;
            }
        }
        if (result.length + 1 === maskExpression.length
            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {
            result += maskExpression[maskExpression.length - 1];
        }
        var /** @type {?} */ shift = 1;
        var /** @type {?} */ newPosition = position + 1;
        while (this._shift.has(newPosition)) {
            shift++;
            newPosition++;
        }
        cb(this._shift.has(position) ? shift : 0);
        return result;
    };
    /**
     * @param {?} mask
     * @param {?} value
     * @return {?}
     */
    IonMaskService.prototype.isNotMatch = function (mask, value) {
        return mask.length !== value.length;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IonMaskService.prototype.removeMask = function (value) {
        if (!value) {
            return value;
        }
        return value.replace(this._regExpForRemove, '');
    };
    /**
     * @param {?} inputSymbol
     * @param {?} maskSymbol
     * @return {?}
     */
    IonMaskService.prototype._checkSymbolMask = function (inputSymbol, maskSymbol) {
        return inputSymbol
            === maskSymbol
            || this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern
                && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);
    };
    return IonMaskService;
}());
IonMaskService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
IonMaskService.ctorParameters = function () { return []; };

var IonInputMaskComponent = (function () {
    function IonInputMaskComponent() {
        this.typeLabel = '';
        this.typeInput = '';
        this.clearInput = false;
        this.lastChild = false;
        this.disabled = false;
        this.clearIfNotMatch = false;
        this.propagateChange = function (_) { };
        this.ionMaskService = new IonMaskService();
    }
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype.registerOnTouched = function () { };
    /**
     * @param {?} obj
     * @return {?}
     */
    IonInputMaskComponent.prototype.writeValue = function (obj) {
        this.valueIonInput = this.ionMaskService.applyMask(obj, this.mask);
        if (obj) {
            this.keyUpEvent(null);
            this.value = obj;
        }
        else {
            this.value = null;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IonInputMaskComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    IonInputMaskComponent.prototype.onChange = function (event) {
        if (!this.valueIonInput) {
            this.value = null;
        }
        else {
            this.value = this.valueIonInput;
            if (this.dropSpecialCharacters) {
                this.value = this.ionMaskService.removeMask(this.valueIonInput);
            }
        }
        this.propagateChange(this.value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IonInputMaskComponent.prototype.onBlur = function (event) {
        if (this.clearIfNotMatch &&
            this.ionMaskService.isNotMatch(this.mask, this.valueIonInput)) {
            this.valueIonInput = '';
            this.onChange();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IonInputMaskComponent.prototype.keyUpEvent = function (event) {
        this.valueIonInput = this.ionMaskService.applyMask(this.valueIonInput, this.mask);
        this.onChange(event);
    };
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype.getAttrTypeInput = function () {
        return this.typeInput || 'text';
    };
    /**
     * @param {?} type
     * @return {?}
     */
    IonInputMaskComponent.prototype.getAttrLabel = function (type) {
        return this.typeLabel === type;
    };
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype.getAttrClearInput = function () {
        return this.clearInput ? '' : null;
    };
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype.getAttrPlaceholder = function () {
        return this.placeholder ? this.placeholder : '';
    };
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype._setPropService = function () {
        this._setProp('maskSpecialCharacters', this.specialCharacters);
        this._setProp('maskAvailablePatterns', this.patterns);
        if (this.dropSpecialCharacters === undefined) {
            this.dropSpecialCharacters = this.ionMaskService.dropSpecialCharacters;
        }
        if (this.clearIfNotMatch === undefined) {
            this.clearIfNotMatch = this.ionMaskService.clearIfNotMatch;
        }
    };
    /**
     * @param {?} nameProp
     * @param {?} prop
     * @return {?}
     */
    IonInputMaskComponent.prototype._setProp = function (nameProp, prop) {
        if (prop) {
            this.ionMaskService[nameProp] = prop;
        }
    };
    /**
     * @return {?}
     */
    IonInputMaskComponent.prototype.ngOnInit = function () {
        this._setPropService();
    };
    return IonInputMaskComponent;
}());
IonInputMaskComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ion-input-mask',
                template: "<ion-item> <ion-label *ngIf=\"getAttrLabel('stacked') && label\" for=\"ionInput\" stacked>{{label}}</ion-label> <ion-label *ngIf=\"getAttrLabel('floating') && label\" for=\"ionInput\" floating>{{label}}</ion-label> <ion-label *ngIf=\"getAttrLabel('fixed') && label\" for=\"ionInput\" fixed>{{label}}</ion-label> <ion-label *ngIf=\"getAttrLabel('') && label\" for=\"ionInput\">{{label}}</ion-label> <ion-input id=\"ionInput\" [type]=\"getAttrTypeInput()\" [disabled]=\"disabled ? '' : null\" (keyup)=\"keyUpEvent($event)\" (blur)=\"onBlur($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"valueIonInput\" [attr.clearInput]=\"getAttrClearInput()\" [placeholder]=\"getAttrPlaceholder()\"> </ion-input> </ion-item> <div *ngIf=\"!lastChild\"></div>",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return IonInputMaskComponent; }),
                        multi: true
                    }
                ]
            },] },
];
/**
 * @nocollapse
 */
IonInputMaskComponent.ctorParameters = function () { return []; };
IonInputMaskComponent.propDecorators = {
    'placeholder': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'typeLabel': [{ type: core.Input },],
    'typeInput': [{ type: core.Input },],
    'clearInput': [{ type: core.Input },],
    'lastChild': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
    'mask': [{ type: core.Input },],
    'specialCharacters': [{ type: core.Input },],
    'patterns': [{ type: core.Input },],
    'dropSpecialCharacters': [{ type: core.Input },],
    'clearIfNotMatch': [{ type: core.Input },],
};

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var IonMaskModule = (function () {
    function IonMaskModule() {
    }
    /**
     * @param {?=} configValue
     * @return {?}
     */
    IonMaskModule.forRoot = function (configValue) {
        if (configValue === void 0) { configValue = initialConfig; }
        return {
            ngModule: IonMaskModule,
            providers: [
                {
                    provide: config,
                    useValue: __assign({}, initialConfig, configValue)
                }
            ]
        };
    };
    return IonMaskModule;
}());
IonMaskModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    ionicAngular.IonicModule,
                    forms.FormsModule
                ],
                declarations: [
                    IonInputMaskComponent
                ],
                exports: [
                    IonInputMaskComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
IonMaskModule.ctorParameters = function () { return []; };

exports.IonMaskModule = IonMaskModule;
exports.IonInputMaskComponent = IonInputMaskComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
