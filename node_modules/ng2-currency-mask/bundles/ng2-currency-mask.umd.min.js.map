{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng2-currency-mask/lib/currency-mask.config.ts","ng://ng2-currency-mask/lib/input.manager.ts","ng://ng2-currency-mask/lib/input.service.ts","ng://ng2-currency-mask/lib/input.handler.ts","ng://ng2-currency-mask/lib/currency-mask.directive.ts","ng://ng2-currency-mask/lib/currency-mask.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","CURRENCY_MASK_CONFIG","InjectionToken","InputManager","htmlInputElement","this","prototype","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","InputService","options","inputManager","addNumber","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","_a","allowNegative","decimal","precision","prefix","suffix","thousands","onlyNumbers","Number","toFixed","integerPart","decimalPart","repeat","isZero","parseInt","indexOf","clearMask","RegExp","parseFloat","changeToNegative","charAt","changeToPositive","fixCursorPosition","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","removeNumber","test","undefined","updateOptions","canInputMoreNumbers","storedRawValue","InputHandler","inputService","handleClick","event","chromeAndroid","Math","abs","isNaN","handleCut","_this","isReadOnly","setTimeout","setValue","onModelChange","handleInput","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","handleKeydown","which","charCode","preventDefault","selectionRangeLength","handleKeypress","isArrowEndHomeKeyInFirefox","handleKeyup","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","oldString","newString","x","charCodeAt","readOnly","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","assign","ngOnInit","handleBlur","apply","isChromeAndroid","navigator","userAgent","registerOnChange","registerOnTouched","setDisabledState","disabled","validate","abstractControl","result","max","min","writeValue","Optional","type","Inject","args","ElementRef","KeyValueDiffers","Input","HostListener","CurrencyMaskDirective_1","Directive","selector","providers","NG_VALIDATORS","CurrencyMaskModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\n\nexport interface CurrencyMaskConfig {\n\n    align: string;\n    allowNegative: boolean;\n    decimal: string;\n    precision: number;\n    prefix: string;\n    suffix: string;\n    thousands: string;\n}\n\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");","export class InputManager {\n\n    private _storedRawValue: string;\n\n    constructor(private htmlInputElement: any) {\n    }\n\n    setCursorAt(position: number): void {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        } else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n\n    get canInputMoreNumbers(): boolean {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n\n    get inputSelection(): any {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        } else {\n            let range = document.getSelection().anchorNode;\n\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                } else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    } else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n\n    get rawValue(): string {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n\n    set rawValue(value: string) {\n        this._storedRawValue = value;\n\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n\n    get storedRawValue(): string {\n        return this._storedRawValue;\n    }\n}","import { InputManager } from \"./input.manager\";\n\nexport class InputService {\n\n    private inputManager: InputManager;\n\n    constructor(private htmlInputElement: any, private options: any) {\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n\n    addNumber(keyCode: number): void {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n\n    applyMask(isNumber: boolean, rawValue: string): string {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n        if (!onlyNumbers) {\n            return \"\";\n        }\n\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = (rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n\n    clearMask(rawValue: string): number {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n\n        return parseFloat(value);\n    }\n\n    changeToNegative(): void {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n\n    changeToPositive(): void {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n\n    fixCursorPosition(forceToEndPosition?: boolean): void {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n\n    getRawValueWithoutSuffixEndPosition(): number {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n\n    getRawValueWithoutPrefixStartPosition(): number {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n\n    removeNumber(keyCode: number): void {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n\n    updateFieldValue(selectionStart?: number): void {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n\n    updateOptions(options: any): void {\n        let value: number = this.value;\n        this.options = options;\n        this.value = value;\n    }\n\n    get canInputMoreNumbers(): boolean {\n        return this.inputManager.canInputMoreNumbers;\n    }\n\n    get inputSelection(): any {\n        return this.inputManager.inputSelection;\n    }\n\n    get rawValue(): string {\n        return this.inputManager.rawValue;\n    }\n\n    set rawValue(value: string) {\n        this.inputManager.rawValue = value;\n    }\n\n    get storedRawValue(): string {\n        return this.inputManager.storedRawValue;\n    }\n\n    get value(): number {\n        return this.clearMask(this.rawValue);\n    }\n\n    set value(value: number) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}","import { InputService } from \"./input.service\";\n\nexport class InputHandler {\n\n    private inputService: InputService;\n    private onModelChange: Function;\n    private onModelTouched: Function;\n    private htmlInputElement: HTMLInputElement;\n\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n\n    handleClick(event: any, chromeAndroid: boolean): void {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n\n    handleCut(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n\n    handleInput(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            } else {\n                this.setValue(null);\n            }\n        }\n\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeydown(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n\n    handleKeypress(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeyup(event: any): void {\n        this.inputService.fixCursorPosition();\n    }\n\n    handlePaste(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n\n    updateOptions(options: any): void {\n        this.inputService.updateOptions(options);\n    }\n\n    getOnModelChange(): Function {\n        return this.onModelChange;\n    }\n\n    setOnModelChange(callbackFunction: Function): void {\n        this.onModelChange = callbackFunction;\n    }\n\n    getOnModelTouched(): Function {\n        return this.onModelTouched;\n    }\n\n    setOnModelTouched(callbackFunction: Function) {\n        this.onModelTouched = callbackFunction;\n    }\n\n    setValue(value: number): void {\n        this.inputService.value = value;\n    }\n\n    private getNewKeyCode(oldString: string, newString: string): number {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n    }\n\n    private isArrowEndHomeKeyInFirefox(event: any) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n\n    private setCursorPosition(event: any): void {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n\n        setTimeout(function () {\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}","import { AfterViewInit, Directive, DoCheck, ElementRef, forwardRef, HostListener, Inject, Input, KeyValueDiffer, KeyValueDiffers, OnInit, Optional } from \"@angular/core\";\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from \"@angular/forms\";\nimport { CurrencyMaskConfig, CURRENCY_MASK_CONFIG } from \"./currency-mask.config\";\nimport { InputHandler } from \"./input.handler\";\n\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true\n};\n\n@Directive({\n    selector: \"[currencyMask]\",\n    providers: [\n        CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n        { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }\n    ]\n})\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit, Validator {\n\n    @Input() max: number;\n    @Input() min: number;\n    @Input() options: any = {};\n\n    inputHandler: InputHandler;\n    keyValueDiffer: KeyValueDiffer<any, any>;\n\n    optionsTemplate = {\n        align: \"right\",\n        allowNegative: true,\n        decimal: \".\",\n        precision: 2,\n        prefix: \"$ \",\n        suffix: \"\",\n        thousands: \",\"\n    };\n\n    constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig, private elementRef: ElementRef, private keyValueDiffers: KeyValueDiffers) {\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\n        }\n    }\n\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\n    }\n\n    @HostListener(\"blur\", [\"$event\"])\n    handleBlur(event: any) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    handleClick(event: any) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n\n    @HostListener(\"cut\", [\"$event\"])\n    handleCut(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    handleInput(event: any) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    handleKeydown(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n\n    @HostListener(\"keypress\", [\"$event\"])\n    handleKeypress(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n\n    @HostListener(\"keyup\", [\"$event\"])\n    handleKeyup(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n\n    @HostListener(\"paste\", [\"$event\"])\n    handlePaste(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n\n    isChromeAndroid(): boolean {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n\n    registerOnChange(callbackFunction: Function): void {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n\n    registerOnTouched(callbackFunction: Function): void {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n\n    setDisabledState(value: boolean): void {\n        this.elementRef.nativeElement.disabled = value;\n    }\n\n    validate(abstractControl: AbstractControl): { [key: string]: any; } {\n        let result: any = {};\n\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n\n        return result != {} ? result : null;\n    }\n\n    writeValue(value: number): void {\n        this.inputHandler.setValue(value);\n    }\n}","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CurrencyMaskDirective } from \"./currency-mask.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        CurrencyMaskDirective\n    ],\n    exports: [\n        CurrencyMaskDirective\n    ]\n})\nexport class CurrencyMaskModule {\n}"]}